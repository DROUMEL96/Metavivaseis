package ix.back_end;

import java.time.LocalDateTime;
import java.util.Optional;

import org.springframework.web.bind.annotation.RestController;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;


@RestController // This means that this class is a Controller
@RequestMapping(path="/diefthinsimetaforon") // This means URL's start with /review (after Application path)
public class DiefthinsiMetaforonController {
	@Autowired // This means to get the bean called reviewRepository
    // Which is auto-generated by Spring, we will use it to handle the data
	private DiefthinsiMetaforonRepository diefthinsiMetaforonRepository;
	

	 @PostMapping(path="/add") // Map ONLY POST Requests
	 public @ResponseBody String addNew(@RequestParam String title){
            // @ResponseBody means the returned String is the response, not a view name
	    // @RequestParam means it is a parameter from the GET or POST request

	    DiefthinsiMetaforon item = new DiefthinsiMetaforon(title);
	    diefthinsiMetaforonRepository.save(item);
	    return "Saved";
	  }

	 
	  @GetMapping(path="/all")
	  public @ResponseBody Iterable<DiefthinsiMetaforon> getAll() {
	    // This returns a JSON or XML with the reviews
	    return diefthinsiMetaforonRepository.findAll();
	  }
	  
	  
	  @GetMapping("/get/{id}")
	  Optional<DiefthinsiMetaforon> one(@PathVariable Integer id) {
		// Single record
	    return diefthinsiMetaforonRepository.findById(id);
	  }
	
	  @PostMapping("/edit/{id}")
	  DiefthinsiMetaforon replace(@RequestBody DiefthinsiMetaforon newDM, @PathVariable Integer id) {
	    //edit or create if not exists
	    return diefthinsiMetaforonRepository.findById(id)
	      .map(DM -> {
	    	DM.setTitle(newDM.getTitle());
	    	return diefthinsiMetaforonRepository.save(DM);
	      })
	      .orElseGet(() -> {
	        newDM.setId(id);
	        return diefthinsiMetaforonRepository.save(newDM);
	      });
	  }
    
}
